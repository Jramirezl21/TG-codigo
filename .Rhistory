data <- read_sav(ruta_del_archivo)
dffiltrado <- subset(data, edad >= 18)
datosfil <- dffiltrado[,c(3,8,14,15,116:139,68:114,309:320)]
rm(data)
rm(dffiltrado)
datosfilt <- data.frame(lapply(datosfil, function(x) if(is.labelled(x)) as_factor(x) else x))
datosfil1 <- data.frame(lapply(data_fil2, function(x) if(is.labelled(x)) as.numeric(x) else x))
View(datosfil)
View(datosfilt)
View(datosfil)
# Lista de valores a excluir
valores_excluir <- c("No sabe", "Sin dato", "No responde")
valores_excluir2 <- c(88,96,99)
# Filtrar las filas que no contienen los valores deseados en las variables no generales
data_fil <- datosfilt %>%
filter(
across(-c(edad, sexo, region), ~ !(. %in% valores_excluir))
)
data_fil2 <- datosfil %>%
filter(
across(-c(edad, sexo, region), ~ !(. %in% valores_excluir2))
)
View(data_fil)
View(data_fil)
cantidad_na <- rowSums(is.na(data_fil2))
Datos.num<- data_fil2 %>%
filter(cantidad_na < 83)
Datos.cat <- data_fil %>%
filter(cantidad_na < 83)
Datos.cat <- droplevels(Datos.cat)
View(Datos.num)
Datos.num<-  data.frame(lapply(Datos.num, function(x) if(is.labelled(x)) as.numeric(x) else x))
cantidad_na2 <- rowSums(is.na(Datos.num))
cantidad_na2
View(Datos.num)
Datos.num$region <- as.factor(Datos.num$region)
Datos.num$sexo <- as.factor(Datos.num$sexo)
rm(c("data_fil"))
rm(c(data_fil))
rm(data_fil);rm(data_fil2);rm(datosfil);rm(datosfilt)
#REAGRUPACION CAPACIDAD----
#8, 14,1
Datos.num.cap_reagrupado <- dplyr::select(Datos.num,c2,c3,c5,c15,c19,c20,c21,c23,c6,
c7,c8,c9,c10,c11,c12,c13,c14,c16,c17,c18,c22,c24,c4)
Datos.cat.cap_reagrupado <- dplyr::select(Datos.cat,c2,c3,c5,c15,c19,c20,c21,c23,c6,
c7,c8,c9,c10,c11,c12,c13,c14,c16,c17,c18,c22,c24
,c4)
#8,13,1
cap_reagrupado_NoNA_num <- dplyr::select(Datos.num,c2,c3,c5,c15,c19,c20,c21,c23,c6,
c7,c8,c9,c10,c11,c12,c13,c14,c16,c17,c18,c22,c4)
cap_reagrupado_NoNA_cat <- dplyr::select(Datos.cat,c2,c3,c5,c15,c19,c20,c21,c23,c6,
c7,c8,c9,c10,c11,c12,c13,c14,c16,c17,c18,c22,c4)
#12,34
Datos.num.de_reagrupado <- dplyr::select(Datos.num,d15,d16,d17,d18,d19,d21,d22,d23,d24,d25,d34,d35,
d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13,
d14, d20, d26, d27, d28, d29, d30, d31, d32, d33, d36, d37,
d38, d39, d40, d41, d42, d43, d44, d45, d46)
Datos.cat.de_reagrupado <- dplyr::select(Datos.cat,d15,d16,d17,d18,d19,d21,d22,d23,d24,d25,d34,d35,
d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13,
d14, d20, d26, d27, d28, d29, d30, d31, d32, d33, d36, d37,
d38, d39, d40, d41, d42, d43, d44, d45, d46)
#12,33
de_reagrupado_NoNA_num <- dplyr::select(Datos.num,d15,d16,d17,d18,d19,d21,d22,d23,d24,d25,d34,d35,
d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13,
d14, d20, d26, d27, d28, d29, d30, d31, d32, d33, d36, d37,
d38, d39, d40, d41, d42, d43, d44, d45)
de.cat_reagrupado_NoNA_num <- dplyr::select(Datos.cat,d15,d16,d17,d18,d19,d21,d22,d23,d24,d25,d34,d35,
d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13,
d14, d20, d26, d27, d28, d29, d30, d31, d32, d33, d36, d37,
d38, d39, d40, d41, d42, d43, d44, d45)
#REAGRUPACION FACTORES AMBIENTALES----
#11,12
#7,1,1,1
Datos.num.fa_reagrupado<- dplyr::select(Datos.num,fa1,fa3,fa6,fa7,fa8,fa9,fa10,fa2,fa11,fa4,fa5)
Datos.cat.fa_reagrupado <- dplyr::select(Datos.cat,fa1,fa3,fa6,fa7,fa8,fa9,fa10,fa2,fa11,fa4,fa5)
fa_reagrupado_NoNA_num <- dplyr::select(Datos.num,fa1,fa3,fa6,fa7,fa8,fa9,fa10,fa2,fa4,fa5)
fa_reagrupado_NoNA_cat <- dplyr::select(Datos.cat,fa1,fa3,fa6,fa7,fa8,fa9,fa10,fa2,fa4,fa5)
Datos.num.comple <- na.omit(Datos.num)
Datos.num.incomp <- Datos.num[rowSums(is.na(Datos.num)) > 0, ]
Datos.num.imcomp <- subset(Datos.num.imcomp,
select = -which(colSums(is.na(Datos.num.imcomp)) > 0))
Datos.num.incomp <- Datos.num[rowSums(is.na(Datos.num)) > 0, ]
Datos.num.imcomp <- subset(Datos.num.imcomp,
select = -which(colSums(is.na(Datos.num.imcomp)) > 0))
Datos.num.imcomp <- subset(Datos.num.imcomp,
select = -which(colSums(is.na(Datos.num.incomp)) > 0))
colSums(is.na(Datos.num.incomp)
colSums(is.na(Datos.num.incomp)
Datos.num.incomp <- Datos.num[rowSums(is.na(Datos.num)) > 0, ]
Datos.num.imcomp <- Datos.num.imcomp %>%
select(names(.)[!colSums(is.na(.)) > 0])
View(Datos.num.incomp)
View(Datos.num.incomp)
Datos.num.imcomp %>%
select(names(.)[!colSums(is.na(.)) > 0])
Datos.num.imcomp <- Datos.num.imcomp[,-c('c24', 'c25', 'd46', 'd47', 'fa11', 'fa12')]
Datos.num.incomp$rph_id
Datos.num.incomp <- Datos.num[rowSums(is.na(Datos.num)) > 0, ]
Datos.num.imcomp <- Datos.num.imcomp[,-c('c24', 'c25', 'd46', 'd47', 'fa11', 'fa12')]
class(Datos.num.incomp)
Incom_NoNA <- Datos.num.incomp[, complete.cases(Datos.num.incomp)]
Incom_NoNA <- subset(Datos.num.incomp, select = -which(colSums(is.na(Datos.num.incomp)) > 0))
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
install.packages("foreign")
library(foreign)
?write.foreign
write.foreign(Datos.num.comple, "Datos.num.comple.sav", "Datos.num.comple.sav", package = "SPSS")
fitIncom<-cfa(model= modeloIncom,
data = Incom_NoNA[,c(5:81)], orthogonal=T,ordered = F)
## ANALISIS FACTORIAL CONFIRMATORIO ----
modeloIncom<-"capacidad =~ c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 + c10 + c11 + c12 + c13 + c14 + c15 + c16 + c17 + c18 + c19 + c20 + c21 + c22 + c23
desempeno =~ d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12 +
d13 + d14 + d15 + d16 + d17 + d18 + d19 + d20 + d21 + d22 + d23 + d24 +
d25 + d26 + d27 + d28 + d29 + d30 + d31 + d32 + d33 + d34 + d35 + d36 + d37
+ d38 + d39 + d40 + d41 + d42 + d43 + d44 + d45
factores_ambientales =~ fa1 + fa2 + fa3 + fa4 + fa5 + fa6 + fa7 + fa8 + fa9 + fa10
"
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
## ANALISIS FACTORIAL CONFIRMATORIO ----
modeloIncom<-"capacidad =~ c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 + c10 + c11 + c12 + c13 + c14 + c15 + c16 + c17 + c18 + c19 + c20 + c21 + c22 + c23
desempeno =~ d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12 +
d13 + d14 + d15 + d16 + d17 + d18 + d19 + d20 + d21 + d22 + d23 + d24 +
d25 + d26 + d27 + d28 + d29 + d30 + d31 + d32 + d33 + d34 + d35 + d36 + d37
+ d38 + d39 + d40 + d41 + d42 + d43 + d44 + d45
factores_ambientales =~ fa1 + fa2 + fa3 + fa4 + fa5 + fa6 + fa7 + fa8 + fa9 + fa10
"
fitIncom<-cfa(model= modeloIncom,
data = Incom_NoNA[,c(5:81)], orthogonal=T,ordered = F)
semPlot::semPaths(fitIncom, "std",layout = "circle")
View(fitIncom)
summary(fitIncom)
summary(fitIncom,fit.measures = TRUE, standardized = TRUE)
semPlot::semPaths(fitIncom, "std",layout = "circle3")
semPlot::semPaths(fitIncom, "std",layout = "circle3",color = "black")
semPlot::semPaths(fitIncom, "std",layout = "circle3",edge.color = "black")
# Show coefs
semPlot::semPaths(fitIncom, what = "std", style = "lisrel", layout = "circle")
# Instala e importa las bibliotecas necesarias
install.packages("igraph")
install.packages("igraph")
install.packages("qgraph")
library(igraph)
library(qgraph)
lavInspect(fitIncom, "std")
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
(lavaan)
library(lavaan)
lavInspect(fitIncom, "std")
lavInspect(fitIncom, "std")$lambda
# Crea un gráfico de red
red_grafo <- graph.adjacency(lavInspect(fitIncom, "std")$lambda, weighted = TRUE, mode = "undirected", diag = FALSE,
vertices = nombres_variables)
# Define los nombres de las variables
nombres_variables <- c("cap", "des", "facamb")
# Crea un gráfico de red
red_grafo <- graph.adjacency(lavInspect(fitIncom, "std")$lambda, weighted = TRUE, mode = "undirected", diag = FALSE,
vertices = nombres_variables)
# Define los nombres de las variables
rm(nombres_variables)
# Crea un gráfico de red
red_grafo <- graph.adjacency(lavInspect(fitIncom, "std")$lambda, weighted = TRUE, mode = "undirected", diag = FALSE)
write.csv(Datos.num.comple,"DatosNumComple.csv")
lavInspect(fitIncom, "std")
EFAIncom   <- fa(RIncom, nfactors = 3, rotate = "varimax",
fm="ml")
biplot.psych(fa(Incom_NoNA[,c(5:81)],nfactors = 3,fm="ml",rotate = "varimax"),
main = paste("Biplot con rotación varimax"),col=c(2,3,4),
pch = c(21,18))
library(psych)
biplot.psych(fa(Incom_NoNA[,c(5:81)],nfactors = 3,fm="ml",rotate = "varimax"),
main = paste("Biplot con rotación varimax"),col=c(2,3,4),
pch = c(21,18))
EFAIncom$weights
EFAIncom   <- fa(RIncom, nfactors = 3, rotate = "varimax",
fm="ml")
##Analisis Factorial exploratorio ----
RIncom <- cor(Incom_NoNA[,c(5:81)])
KMO(RIncom)
fa.parallel(RIncom, fm="ml")
EFAIncom   <- fa(RIncom, nfactors = 3, rotate = "varimax",
fm="ml")
EFAIncom$weights
####
# Obtener el índice del máximo en cada fila
max_indices <- apply(EFAIncom$weights, 1, which.max)
max_indices
# Crear una nueva matriz con todos los valores establecidos en cero
simplified_matrix <- matrix(0, nrow = nrow(EFAIncom$weights), ncol = ncol(EFAIncom$weights))
# Establecer el valor máximo en cada fila y dejar el resto en cero
for (i in 1:nrow(EFAIncom$weights)) {
simplified_matrix[i, max_indices[i]] <- EFAIncom$weights[i, max_indices[i]]
}
simplified_matrix
semPlot::semPaths(fitIncom, "std",layout = "circle3",edge.color = "black")
semPlot::semPaths(fitIncom, "std",layout = "circle3",edge.color = "black")
View(Datos.num.incomp)
#Preguntar al profe por la c7 0.59 cf
capIncomSelect_NoNA <- dplyr::select(Datos.num.incomp,c6,
c8,c9,c10,c11,c12,c16,c17,c18,c22,c4,c5)
MFAincompSelectCap <- MFA(capIncomSelect_NoNA,group=c(10,1,1))
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
MFAincompSelectCap <- MFA(capIncomSelect_NoNA,group=c(10,1,1))
deIncomSelect_NoNA <- dplyr::select(Datos.num.incomp,d21,
d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13,
d14, d31, d36, d37, d42, d43, d45)
MFAincompSelectDe <- MFA(deIncomSelect_NoNA,group=c(1,20))
faIncomSelect_NoNA <- dplyr::select(Datos.num.incomp,fa3,fa6,fa7,fa2,fa4)
MFAincompSelectFa <- MFA(faIncomSelect_NoNA,group =c(3,1,1))
###### Indicicadores ######
#Incompletos
T1.capIncomp <- MFAincompSelectCap$ind$coord[,1]
T1.deIncomp <- MFAincompSelectDe$ind$coord[,1]
T1.faIncomp <- MFAincompSelectFa$ind$coord[,1]
MFAincompSelectCap$eig[1,1]+MFAincompSelectDe$eig[1,1]+MFAincompSelectFa$eig[1,1]
MFAincompSelectCap$eig[1,1]/5.758771
MFAincompSelectDe$eig[1,1]/5.758771
MFAincompSelectFa$eig[1,1]/5.758771
I_1Select <- (MFAincompSelectCap$ind$coord[,1]*MFAincompSelectCap$eig[1,1]/5.758771)+
(MFAincompSelectDe$ind$coord[,1]*MFAincompSelectDe$eig[1,1]/5.758771)+
(MFAincompSelectFa$ind$coord[,1]*MFAincompSelectFa$eig[1,1]/5.758771)
Puntaje.I_1 <- 100-((I_1Select - min(I_1Select))*100/(max(I_1Select)-min(I_1Select)))
Puntaje.df <- data.frame(Puntaje.I_1)
Puntaje.df
xtable::xtable(Puntaje.df[10,])
xtable::xtable(Puntaje.df[10,])
xtable::xtable(Puntaje.I_1[10])
xtable::xtable(as.matrix(Puntaje.df[10,])
xtable::xtable(as.matrix(Puntaje.df[10,]))
xtable::xtable(as.matrix(Puntaje.df$Puntaje.I_1)
xtable::xtable(Puntaje.df$Puntaje.I_1)
xtable::xtable(Puntaje.df$Puntaje.I_1)
xtable::xtable(c(Puntaje.df$Puntaje.I_1)
xtable::xtable(c(Puntaje.df$Puntaje.I_1))
xtable::xtable(Puntaje.df)
xtable::xtable(Puntaje.df[10,])
xtable::xtable(data.frame(Puntaje.df[10,]))
xtable::xtable(data.frame(Puntaje.df[c(1:10),]))
View(Datos.num.incomp)
EFAIncom$weights
library(whomds)
library(EFAtools)
library(psych)
library(haven)
library(polycor)
library(ggcorrplot)
library(GPArotation)
library(psych)
library(lavaan)
library(polycor)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(ade4)
library(FactoMineR)
library(missMDA)
library(dplyr)
Incom_NoNA
View(Incom_NoNA)
5+22
Incom_NoNA[,c(5:27)]
Incom_NoNA[,c(5:28)]
Incom_NoNA[,c(5:26)]
#Analisis factorial confirmatorio y exploratorio ####
##Analsis facotrial exploratorio para capacidad
RIncomCap <- cor(Incom_NoNA[,c(5:26)])
KMO(RIncomCap)
fa.parallel(RIncomCap, fm="ml")
scree(RIncomCap)
EFAIncomCap   <- fa(RIncom, rotate = c("none","varimax"),
fm="ml")
EFAIncomCap   <- fa(RIncom, rotate = "none",
fm="ml")
rm(EFAIncomCap)
EFAIncomCap_None   <- fa(RIncom, rotate = "none",
fm="ml")
summary(EFAIncomCap_None)
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncom,nfactors=4 ,rotate = "none",
fm="ml")
summary(EFAIncomCap_None)
EFAIncomCap_None   <- fa(RIncom,nfactors=4 ,rotate = "none",
fm="ml")
summary(EFAIncomCap_None)
EFAIncomCap_None   <- fa(RIncom,nfactors=4 ,rotate = "none",
fm="ml")
factors
EFAIncomCap_None$loadings
EFAIncomCap_None$weights
fa.parallel(RIncomCap, fm="pa")
EFAIncomCap_None   <- fa(RIncom,nfactors=4 ,rotate = "none",
fm="pa")
summary(EFAIncomCap_None)
summary(EFAIncomCap_None)
EFAIncomCap_None
EFAIncomCap_None$weights
EFAIncomCap_None   <- fa(RIncom,nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="pa",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="ml",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="pc",nfactors=4 ,rotate = "none")
EFAIncomCap_None   <- fa(RIncomCap,fm="pca",nfactors=4 ,rotate = "none")
EFAIncomCap_None   <- fa(RIncomCap,fm="fa",nfactors=4 ,rotate = "none")
EFAIncomCap_None   <- fa(RIncomCap,fm="fa",nfactors=4 ,rotate = "none")
EFAIncomCap_None   <- fa(RIncomCap,fm="fa",nfactors=4 ,rotate = "none")
EFAIncomCap_None   <- fa(RIncomCap,fm="pa",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="ml",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="alpha",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="minres",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None   <- fa(RIncomCap,fm="ols",nfactors=4 ,rotate = "none")
EFAIncomCap_None
EFAIncomCap_None <- principal(RIncomCap, nfactors = 4, rotate = "none")
EFAIncomCap_None
EFAIncomCap_Varimax <- principal(RIncomCap, nfactors = 4, rotate = "varimax")
27+45
Incom_NoNA[,c(27: 72)]
KMO(RIncomDe)
##Analsis facotrial exploratorio para desempeño
RIncomDe <- cor(Incom_NoNA[,c(27:71)])
KMO(RIncomDe)
scree(RIncomDe)
scree(RIncomDe,pc=T)
fa(RIncomCap, nfactors = 4, rotate = "none",fm="principal")
scree(RIncomCap)
EFAIncomCap_None <- principal(RIncomDe, nfactors = 4, rotate = "none")
EFAIncomCap_None <- principal(RIncomCap, nfactors = 4, rotate = "none")
EFAIncomCap_Varimax <- principal(RIncomCap, nfactors = 4, rotate = "varimax")
EFAIncomDe_None <- principal(RIncomDe, nfactors = 4, rotate = "none")
EFAIncomDe_Varimax <- principal(RIncomDe, nfactors = 4, rotate = "varimax")
EFAIncomDe_Varimax
EFAIncomCap_Varimax
EFAIncomCap_None
EFAIncomDe_Varimax
fa.parallel(RIncomCap, fm="pc")
(RIncomCap, fm="pc")
fa.parallel(RIncomCap, fm="pc")
scree(RIncomDe,pc=T)
scree(RIncomCap)
EFAIncomDe_Varimax <- principal(RIncomDe, nfactors = 9, rotate = "varimax")
EFAIncomDe_None <- principal(RIncomDe, nfactors = 9, rotate = "none")
EFAIncomDe_Varimax
EFAIncomDe_None
EFAIncomDe_Varimax
##Analsis facotrial exploratorio para factores ambientales
RIncomFa <- cor(Incom_NoNA[,c(72:81)])
KMO(RIncomFa)
scree(RIncomFa,pc=T)
EFAIncomFa_None <- principal(RIncomFa, nfactors = 2, rotate = "none")
EFAIncomFa_Varimax <- principal(RIncomFa, nfactors = 2, rotate = "varimax")
EFAIncomFa_None
Incom_NoNA[,c(5:81)]
RIncom <- cor(Incom_NoNA[,c(5:81)])
scree(RIncom,pc=T)
EFAIncom_Varimax <- principal(RIncom, nfactors = 3, rotate = "varimax")
EFAIncom_Varimax
round(EFAIncom_Varimax$loadings,3)
EFAIncom_Varimax
round(EFAIncom_Varimax$values,3)
round(EFAIncom_Varimax$loadings,3)
print(EFAIncom_Varimax$loadings,cutoff=0)
round(EFAIncom_Varimax$loadings,cutoff=0,3)
round(print(EFAIncom_Varimax$loadings,cutoff=0),3)
cargasIncomp_Varimax <- (EFAIncom_Varimax$loadings,cutoff=0)
cargasIncomp_Varimax <- data.frame(EFAIncom_Varimax$loadings,cutoff=0)
cargasIncomp_Varimax
cargasIncomp_Varimax <- data.frame(print(EFAIncom_Varimax$loadings,cutoff=0))
cargasIncomp_Varimax <- data.frame(print(EFAIncom_Varimax$loadings,cutoff=0))
cargasIncomp_Varimax
cargas <- print(EFAIncom_Varimax$loadings,cutoff=0)
rm(cargasIncomp_Varimax)
as.matrix(cargas)
as.matrix(cargas,cutoff=0)
rm(cargas)
xtable::xtable(print(EFAIncom_Varimax$loadings,cutoff=0))
xtable::xtable(print(EFAIncom_Varimax$loadings,cutoff=0))
print(EFAIncom_Varimax$loadings,cutoff=0)
View(EFAIncom)
View(EFAIncom_Varimax)
View(EFAIncom_Varimax)
EFAIncom[["loadings"]]
EFAIncom[["loadings"],cutoff=0]
rm(EFAIncom)
class(EFAIncom_Varimax$loadings)
EFAIncomFa_Varimax <- principal(RIncomFa, nfactors = 2, rotate = "varimax",cutoff=0)
EFAIncomFa_Varimax <- principal(RIncomFa, nfactors = 2, rotate = "varimax")
EFAIncom_Varimax <- principal(RIncom, nfactors = 3, rotate = "varimax")
cargas <- print(EFAIncom_Varimax$loadings,cutoff=0)
class(cargas)
as.data.frame(EFAIncom_Varimax$loadings)
cargas <- as.data.frame(EFAIncom_Varimax$loadings)
cargas
cargas <- as.data.frame(round(EFAIncom_Varimax$loadings,3))
cargas
print(EFAIncom_Varimax$loadings,cutoff=0)
CargasIncompVarimax <- cargas[c(1:77),]
CargasIncompVarimax
print(EFAIncom_Varimax$loadings,cutoff=0)
CargasIncompVarimax
View(Datos.num.incomp)
cargas <- as.data.frame(round(EFAIncom_Varimax$loadings,2))
CargasIncompVarimax <- cargas[c(1:77),]
CargasIncompVarimax
View(Datos.num.comple)
##Analisis factorial confirmatorio general datos completos
RCom <- cor(Datos.num.comple[,c(5:87)])
scree(RCom,pc=T)
EFACom_Varimax <- principal(RCom, nfactors = 3, rotate = "varimax")
print(EFACom_Varimax$loadings,cutoff=0)
cargas <- as.data.frame(round(EFACom_Varimax$loadings,2))
cargas1 <- as.data.frame(round(EFAIncom_Varimax$loadings,3))
rm(cargas)
cargas1 <- as.data.frame(round(EFAIncom_Varimax$loadings,3))
CargasIncompVarimax <- cargas1[c(1:77),]
CargasIncompVarimax
cargas2 <- as.data.frame(round(EFACom_Varimax$loadings,2))
cargas2
CargasIncompVarimax <- cargas2[c(1:83),]
CargasIncompVarimax
#Seleccion de variables-Cargas mayores por factor
# Crear una nueva matriz con todos los valores establecidos en cero ####
##Para datos incompletos
# Obtener el índice del máximo en cada fila
max_indicesIncomp <- apply(CargasIncompVarimax, 1, which.max)
simplified_matrixIncomp <- matrix(0, nrow = nrow(CargasIncompVarimax),
ncol = ncol(CargasIncompVarimax))
# Establecer el valor máximo en cada fila y dejar el resto en cero
for (i in 1:nrow(CargasIncompVarimax)) {
simplified_matrixIncomp[i, max_indicesIncomp[i]] <- CargasIncompVarimax[i, max_indicesIncomp[i]]
}
simplified_matrixIncomp
CargasIncompVarimax <- cargas1[c(1:77),]
CargasCompVarimax <- cargas2[c(1:83),]
##Para datos incompletos
# Obtener el índice del máximo en cada fila
max_indicesIncomp <- apply(CargasIncompVarimax, 1, which.max)
simplified_matrixIncomp <- matrix(0, nrow = nrow(CargasIncompVarimax),
ncol = ncol(CargasIncompVarimax))
# Establecer el valor máximo en cada fila y dejar el resto en cero
for (i in 1:nrow(CargasIncompVarimax)) {
simplified_matrixIncomp[i, max_indicesIncomp[i]] <- CargasIncompVarimax[i, max_indicesIncomp[i]]
}
simplified_matrixIncomp
argasIncompVarimax
CargasIncompVarimax
##Para datos completos
max_indicesComp <- apply(CargasCompVarimax, 1, which.max)
simplified_matrixComp <- matrix(0, nrow = nrow(CargasCompVarimax),
ncol = ncol(CargasCompVarimax))
##Para datos completos
max_indicesComp <- apply(CargasCompVarimax, 1, which.max)
simplified_matrixComp <- matrix(0, nrow = nrow(CargasCompVarimax),
ncol = ncol(CargasCompVarimax))
# Establecer el valor máximo en cada fila y dejar el resto en cero
for (i in 1:nrow(CargasCompVarimax)) {
simplified_matrixComp[i, max_indicesComp[i]] <- CargasCompVarimax[i, max_indicesComp[i]]
}
simplified_matrixComp
